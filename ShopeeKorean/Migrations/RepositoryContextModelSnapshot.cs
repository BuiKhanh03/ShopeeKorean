// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace ShopeeKorean.Application.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("ShopeeKorean.Entities.Models.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("cart_id_primary");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("ShopeeKorean.Entities.Models.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("cartitem_id_primary");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItem", (string)null);
                });

            modelBuilder.Entity("ShopeeKorean.Entities.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("ImageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("category_id_primary");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2bad4a96-6dff-4fa3-9c2e-6899264fb739"),
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            Name = "Điện thoại & Phụ kiện"
                        },
                        new
                        {
                            Id = new Guid("2bad4a96-6dff-4fa3-9c2e-6899264fb738"),
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            Name = "Máy tính & Laptop"
                        },
                        new
                        {
                            Id = new Guid("2bad4a96-6dff-4fa3-9c2e-6899264fb737"),
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            Name = "Thiết bị điện tử"
                        },
                        new
                        {
                            Id = new Guid("2bad4a96-6dff-4fa3-9c2e-6899264fb736"),
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            Name = "Máy ảnh & Máy quay phim"
                        },
                        new
                        {
                            Id = new Guid("2bad4a96-6dff-4fa3-9c2e-6899264fb735"),
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            Name = "Thời trang Nam"
                        },
                        new
                        {
                            Id = new Guid("2bad4a96-6dff-4fa3-9c2e-6899264fb734"),
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            Name = "Thời trang Nữ"
                        },
                        new
                        {
                            Id = new Guid("2bad4a96-6dff-4fa3-9c2e-6899264fb733"),
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            Name = "Mẹ & Bé"
                        },
                        new
                        {
                            Id = new Guid("2bad4a96-6dff-4fa3-9c2e-6899264fb732"),
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            Name = "Nhà cửa & Đời sống"
                        },
                        new
                        {
                            Id = new Guid("2bad4a96-6dff-4fa3-9c2e-6899264fb728"),
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            Name = "Sức khỏe & Làm đẹp"
                        },
                        new
                        {
                            Id = new Guid("2bad4a96-6dff-4fa3-9c2e-6899264fb731"),
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            Name = "Giày dép Nam / Nữ"
                        },
                        new
                        {
                            Id = new Guid("2bad4a96-6dff-4fa3-9c2e-6899264fb730"),
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            Name = "Túi xách / Balo"
                        },
                        new
                        {
                            Id = new Guid("2bad4a96-6dff-4fa3-9c2e-6899264fb721"),
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            Name = "Đồng hồ & Trang sức"
                        },
                        new
                        {
                            Id = new Guid("2bad4a96-6dff-4fa3-9c2e-6899264fb723"),
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            Name = "Thể thao & Dã ngoại"
                        },
                        new
                        {
                            Id = new Guid("2bad4a96-6dff-4fa3-9c2e-6899264fb729"),
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            Name = "Ô tô - Xe máy - Xe đạp"
                        },
                        new
                        {
                            Id = new Guid("2bad4a96-6dff-4fa3-9c2e-6899264fb724"),
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            Name = "Sách & Văn phòng phẩm"
                        },
                        new
                        {
                            Id = new Guid("2bad4a96-6dff-4fa3-9c2e-6899264fb725"),
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            Name = "Thực phẩm & Đồ uống"
                        },
                        new
                        {
                            Id = new Guid("2bad4a96-6dff-4fa3-9c2e-6899264fb711"),
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            Name = "Thiết bị gia dụng"
                        },
                        new
                        {
                            Id = new Guid("2bad4a96-6dff-4fa3-9c2e-6899264fb712"),
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            Name = "Pet - Đồ dùng thú cưng"
                        },
                        new
                        {
                            Id = new Guid("2bad4a96-6dff-4fa3-9c2e-6899264fb727"),
                            ImageId = "N/A",
                            ImageLink = "N/A",
                            Name = "Game & Console"
                        });
                });

            modelBuilder.Entity("ShopeeKorean.Entities.Models.Coupon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaxDiscount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("MinOrderValue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UsageLimit")
                        .HasColumnType("int");

                    b.Property<int>("UsedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("decimal(18, 2)");

                    b.HasKey("Id")
                        .HasName("coupon_id_primary");

                    b.HasIndex("ProductId");

                    b.ToTable("Coupon", (string)null);
                });

            modelBuilder.Entity("ShopeeKorean.Entities.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PaymentRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("ShippingFee")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("ShippingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("order_id_primary");

                    b.HasIndex("PaymentRecordId")
                        .IsUnique();

                    b.HasIndex("ShippingId")
                        .IsUnique();

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("ShopeeKorean.Entities.Models.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PriceAtTime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("orderitem_id_primary");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("OrderItem", (string)null);
                });

            modelBuilder.Entity("ShopeeKorean.Entities.Models.PaymentRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("PaidAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentRecordMethod")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<int>("PaymentRecordStatus")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("paymentrecord_id_primary");

                    b.ToTable("paymentrecord", (string)null);
                });

            modelBuilder.Entity("ShopeeKorean.Entities.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id")
                        .HasName("product_id_primary");

                    b.HasIndex("CategoryId")
                        .IsUnique();

                    b.HasIndex(new[] { "CategoryId" }, "produc_categoryId_index");

                    b.HasIndex(new[] { "SellerId" }, "produc_sellerId_index");

                    b.HasIndex(new[] { "Name" }, "product_name_index");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("ShopeeKorean.Entities.Models.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("ImageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageLink")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("productimage_id_primary");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage", (string)null);
                });

            modelBuilder.Entity("ShopeeKorean.Entities.Models.ProductSize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("productsize_id_primary");

                    b.HasIndex("ProductId");

                    b.ToTable("productsize", (string)null);
                });

            modelBuilder.Entity("ShopeeKorean.Entities.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("review_id_primary");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId", "ProductId")
                        .IsUnique()
                        .HasDatabaseName("UX_Review_User_Product");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("ShopeeKorean.Entities.Models.Roles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2bad4a96-6dff-4fa3-9c2e-6899264fb739"),
                            Name = "SELLER",
                            NormalizedName = "Seller"
                        },
                        new
                        {
                            Id = new Guid("7d2b39a7-3d9d-4583-acd5-985611a29a5b"),
                            Name = "CUSTOMER",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("ShopeeKorean.Entities.Models.Shipping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Carrier")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("DeliveredAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ShippedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShippingStatus")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("shipping_id_primary");

                    b.ToTable("Shipping", (string)null);
                });

            modelBuilder.Entity("ShopeeKorean.Entities.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id")
                        .HasName("users_id_primary");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex(new[] { "Email" }, "users_email_unique")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex(new[] { "PhoneNumber" }, "users_phonenumber_unique")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ShopeeKorean.Entities.Models.Roles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ShopeeKorean.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ShopeeKorean.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ShopeeKorean.Entities.Models.Roles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopeeKorean.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ShopeeKorean.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShopeeKorean.Entities.Models.Cart", b =>
                {
                    b.HasOne("ShopeeKorean.Entities.Models.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("ShopeeKorean.Entities.Models.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Cart_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopeeKorean.Entities.Models.CartItem", b =>
                {
                    b.HasOne("ShopeeKorean.Entities.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Cart_Item");

                    b.HasOne("ShopeeKorean.Entities.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_CartItem_Product");

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShopeeKorean.Entities.Models.Coupon", b =>
                {
                    b.HasOne("ShopeeKorean.Entities.Models.Product", "Product")
                        .WithMany("Coupons")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Coupon_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShopeeKorean.Entities.Models.Order", b =>
                {
                    b.HasOne("ShopeeKorean.Entities.Models.PaymentRecord", "PaymentRecord")
                        .WithOne("Order")
                        .HasForeignKey("ShopeeKorean.Entities.Models.Order", "PaymentRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Order_PaymentRecord");

                    b.HasOne("ShopeeKorean.Entities.Models.Shipping", "Shipping")
                        .WithOne("Order")
                        .HasForeignKey("ShopeeKorean.Entities.Models.Order", "ShippingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Order_Shipping");

                    b.Navigation("PaymentRecord");

                    b.Navigation("Shipping");
                });

            modelBuilder.Entity("ShopeeKorean.Entities.Models.OrderItem", b =>
                {
                    b.HasOne("ShopeeKorean.Entities.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OrderItem_Order");

                    b.HasOne("ShopeeKorean.Entities.Models.Product", "Product")
                        .WithOne("OrderItem")
                        .HasForeignKey("ShopeeKorean.Entities.Models.OrderItem", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OrderItem_Product");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShopeeKorean.Entities.Models.Product", b =>
                {
                    b.HasOne("ShopeeKorean.Entities.Models.Category", "Category")
                        .WithOne("Product")
                        .HasForeignKey("ShopeeKorean.Entities.Models.Product", "CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Product_Category");

                    b.HasOne("ShopeeKorean.Entities.Models.User", "Seller")
                        .WithMany("Products")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Product_Seller");

                    b.Navigation("Category");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("ShopeeKorean.Entities.Models.ProductImage", b =>
                {
                    b.HasOne("ShopeeKorean.Entities.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Product_Image");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShopeeKorean.Entities.Models.ProductSize", b =>
                {
                    b.HasOne("ShopeeKorean.Entities.Models.Product", "Product")
                        .WithMany("ProductSizes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShopeeKorean.Entities.Models.Review", b =>
                {
                    b.HasOne("ShopeeKorean.Entities.Models.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Review_Product");

                    b.HasOne("ShopeeKorean.Entities.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Review_User");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopeeKorean.Entities.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("ShopeeKorean.Entities.Models.Category", b =>
                {
                    b.Navigation("Product")
                        .IsRequired();
                });

            modelBuilder.Entity("ShopeeKorean.Entities.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ShopeeKorean.Entities.Models.PaymentRecord", b =>
                {
                    b.Navigation("Order")
                        .IsRequired();
                });

            modelBuilder.Entity("ShopeeKorean.Entities.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Coupons");

                    b.Navigation("OrderItem")
                        .IsRequired();

                    b.Navigation("ProductImages");

                    b.Navigation("ProductSizes");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ShopeeKorean.Entities.Models.Shipping", b =>
                {
                    b.Navigation("Order")
                        .IsRequired();
                });

            modelBuilder.Entity("ShopeeKorean.Entities.Models.User", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Products");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
